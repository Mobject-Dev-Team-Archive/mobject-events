<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EventEmitter_TestSuite" Id="{c771dd79-b70b-0181-1b27-c5e2c81ee9a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC EventEmitter_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckEmitWorksWithHandler();
CheckEmitWorksWithMultipleHandlers();
CheckEventIsNotSentToTheWrongHandler();
CheckOffEventUnregistersAHandler();
CheckClearUnregistersMultipleHandlers();
CheckOnceEventCorrectlyCallsHandler();
CheckOnceEventCorrectlyCallsHandlerOnlyOnce();]]></ST>
    </Implementation>
    <Method Name="CheckClearUnregistersMultipleHandlers" Id="{6f968a81-0a57-03c6-3348-3b3f43b11e67}">
      <Declaration><![CDATA[METHOD PUBLIC CheckClearUnregistersMultipleHandlers
VAR
	mockEvent : MockEvent;
	mockHandler1 : MockEventHandler;
	mockHandler2 : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClearUnregistersMultipleHandlers');

// @TEST-FIXTURE
eventEmitter.OnEvent('test', mockHandler1);
eventEmitter.OnEvent('test', mockHandler2);
eventEmitter.Clear();

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventReceived := mockHandler1.EqualsLastEvent(mockEvent) OR mockHandler2.EqualsLastEvent(mockEvent) ;

// @TEST-ASSSERT
AssertFalse(
	Condition := eventReceived,
	Message := 'Event Emitter did not correctly unregister multiple handlers following a clear'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEmitWorksWithHandler" Id="{2e5817dc-28f3-0522-2aca-21ad8e95462f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEmitWorksWithHandler
VAR
	mockEvent : MockEvent;
	mockHandler : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEmitWorksWithHandler');

// @TEST-FIXTURE
eventEmitter.OnEvent('test', mockHandler);

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventReceived := mockHandler.EqualsLastEvent(mockEvent);

// @TEST-ASSSERT
AssertTrue(
	Condition := eventReceived,
	Message := 'Event Emitter did not correctly emmit the event to the handler'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEmitWorksWithMultipleHandlers" Id="{ca286491-29ce-0ee7-232d-791d78869866}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEmitWorksWithMultipleHandlers
VAR
	mockEvent : MockEvent;
	mockHandler1 : MockEventHandler;
	mockHandler2 : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEmitWorksWithMultipleHandlers');

// @TEST-FIXTURE
eventEmitter.OnEvent('test', mockHandler1);
eventEmitter.OnEvent('test', mockHandler2);

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventReceived := mockHandler1.EqualsLastEvent(mockEvent) AND mockHandler2.EqualsLastEvent(mockEvent) ;

// @TEST-ASSSERT
AssertTrue(
	Condition := eventReceived,
	Message := 'Event Emitter did not correctly emmit the event to multiple handlers'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEventIsNotSentToTheWrongHandler" Id="{c9d6842b-c5e0-0fa4-11db-eb3e4bccea3b}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEventIsNotSentToTheWrongHandler
VAR
	mockEvent : MockEvent;
	mockHandler : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEventIsNotSentToTheWrongHandler');

// @TEST-FIXTURE
eventEmitter.OnEvent('foo', mockHandler);

// @TEST-RUN
eventEmitter.Emit('bar',mockEvent);
eventReceived := mockHandler.EqualsLastEvent(mockEvent);

// @TEST-ASSSERT
AssertFalse(
	Condition := eventReceived,
	Message := 'Event Emitter sent the event to the wrong handler'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOffEventUnregistersAHandler" Id="{0291f32e-8068-0b28-38a8-cb83a2bc5dca}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOffEventUnregistersAHandler
VAR
	mockEvent : MockEvent;
	mockHandler : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOffEventUnregistersAHandler');

// @TEST-FIXTURE
eventEmitter.OnEvent('test', mockHandler);
eventEmitter.OffEvent('test', mockHandler);

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventReceived := mockHandler.EqualsLastEvent(mockEvent);

// @TEST-ASSSERT
AssertFalse(
	Condition := eventReceived,
	Message := 'Event Emitter did not correctly unregister the event handler using the off method'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnceEventCorrectlyCallsHandler" Id="{b82d80da-8d21-4c3f-b461-1bcdf25058fc}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnceEventCorrectlyCallsHandler
VAR
	mockEvent : MockEvent;
	mockHandler : MockEventHandler;
	eventEmitter : EventEmitter;
	eventReceived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnceEventCorrectlyCallsHandler');

// @TEST-FIXTURE
eventEmitter.OnceEvent('test', mockHandler);

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventReceived := mockHandler.EqualsLastEvent(mockEvent);

// @TEST-ASSSERT
AssertTrue(
	Condition := eventReceived,
	Message := 'Event Emitter did not notify the handler'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnceEventCorrectlyCallsHandlerOnlyOnce" Id="{41e2f222-2d9a-4d62-b09f-7d10f71b8a0c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnceEventCorrectlyCallsHandlerOnlyOnce
VAR
	mockEvent : MockEvent;
	mockHandler : MockEventHandler;
	eventEmitter : EventEmitter;
	eventCount : INT;
	expected : INT := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnceEventCorrectlyCallsHandlerOnlyOnce');

// @TEST-FIXTURE
eventEmitter.OnceEvent('test', mockHandler);

// @TEST-RUN
eventEmitter.Emit('test',mockEvent);
eventEmitter.Emit('test',mockEvent);
eventCount := mockHandler.EventsHandled;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := eventCount,
	Message := 'Event Emitter notified the handler too many times'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>