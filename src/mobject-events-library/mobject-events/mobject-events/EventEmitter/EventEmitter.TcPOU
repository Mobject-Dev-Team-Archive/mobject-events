<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EventEmitter" Id="{af20607f-a5ec-02fc-119f-14be9850dd13}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK EventEmitter EXTENDS Disposable IMPLEMENTS I_EventEmitter, I_EventTarget
VAR
	firstEventHandlerItem : I_EventHandlerItem;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{04ffa51c-112f-420e-8c0b-d25948a287aa}" />
    <Folder Name="Private" Id="{a4993e39-6b9a-4f97-92bb-498c8e8b3833}" />
    <Method Name="Clear" Id="{2416e33a-b526-085d-3020-bb4e7a00eb99}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisposeAllEventHandlerItems();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeAllEventHandlerItems" Id="{0cc82780-e1f5-44f7-9d97-1b918a826efe}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeAllEventHandlerItems
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE firstEventHandlerItem <> 0 DO
	DisposeEventHandlerItem(firstEventHandlerItem);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeEventHandlerItem" Id="{13c76c82-1756-4efc-95be-059539bbfaf4}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeEventHandlerItem
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveEventHandlerItemFromCollection(EventHandlerItem);
EventHandlerItem.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Emit" Id="{aad762c3-e104-0b65-0953-319091884fb4}">
      <Declaration><![CDATA[METHOD PUBLIC Emit
VAR_INPUT
	EventName : T_MaxString;
	Event : I_Event;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem <> 0 DO
	currentEventHandlerItem.Emit(EventName, Event);
	currentEventHandlerItem := currentEventHandlerItem.Next;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{ddac9f14-3e19-411b-9efc-b7db5d108772}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeAllEventHandlerItems();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindEventHandlerItem" Id="{25dc513f-fa02-4275-bd88-27ca87d53e89}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindEventHandlerItem : I_EventHandlerItem
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem <> 0 DO
	
	IF currentEventHandlerItem.EqualTo(EventName, EventHandler) THEN
		FindEventHandlerItem := currentEventHandlerItem; 
		RETURN;
	END_IF
	
	currentEventHandlerItem := currentEventHandlerItem.Next;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="InsertEventHandlerItem" Id="{202b7263-f049-4b6f-bd05-d85abcfaf3f5}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE InsertEventHandlerItem
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF firstEventHandlerItem = 0 THEN
	firstEventHandlerItem := EventHandlerItem;
	RETURN;
END_IF

currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem.next <> 0 DO
	currentEventHandlerItem := currentEventHandlerItem.next;
END_WHILE

currentEventHandlerItem.next := EventHandlerItem;
EventHandlerItem.previous := currentEventHandlerItem;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{e0cd24fb-c230-0497-1d05-c97ab081c4ae}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR
VAR
	foundHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundHandlerItem := FindEventHandlerItem(EventName, EventHandler);

IF foundHandlerItem = 0 THEN
	RETURN;
END_IF

DisposeEventHandlerItem(foundHandlerItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{b340e1d1-c3bd-4bb2-9574-cef9ac1a9d97}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR
VAR
	pEventHandlerItem : POINTER TO EventHandlerItemOnceOnly;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pEventHandlerItem := __NEW(EventHandlerItemOnceOnly(Name := EventName, Handler := EventHandler, Parent := THIS^));
InsertEventHandlerItem(pEventHandlerItem^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{0bb7cd99-e240-02f7-2993-7f55b6daf7f6}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR
VAR
	pEventHandlerItem : POINTER TO EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pEventHandlerItem := __NEW(EventHandlerItem(Name :=EventName, Handler := EventHandler));
InsertEventHandlerItem(pEventHandlerItem^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveEventHandlerItemFromCollection" Id="{9cdd6aef-3021-4ef4-b031-5c16af019f1a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveEventHandlerItemFromCollection
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR
VAR
	previous : I_EventHandlerItem;
	next : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF EventHandlerItem = 0 THEN
	// nothing to remove
	RETURN;
END_IF

IF EventHandlerItem = firstEventHandlerItem AND EventHandlerItem.Next = 0 THEN 
	
	// the item was the only one in the list, as such you just set the first to zero
	firstEventHandlerItem := 0; 
	
ELSIF EventHandlerItem = firstEventHandlerItem THEN 
	
	// the item was the first in the list of many, so make the next item the first and remove 
	// it's "previous" as the first in the item does not have a previous
	firstEventHandlerItem := EventHandlerItem.next; 
	firstEventHandlerItem.Previous := 0;

ELSIF EventHandlerItem.Next <> 0 THEN
	
	// the item is mid list so link it's previous and next together 
	previous := EventHandlerItem.Previous;
	next := EventHandlerItem.Next;
	
	previous.Next := next;
	next.Previous := previous;
	
ELSE 
	
	// the item is at the end so only remove itself from the previous
	previous := EventHandlerItem.Previous;
	previous.Next := 0;

END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>