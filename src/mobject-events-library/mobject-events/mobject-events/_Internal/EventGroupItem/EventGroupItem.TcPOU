<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EventGroupItem" Id="{64482246-e111-09c5-0503-b887468d0fba}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK EventGroupItem IMPLEMENTS I_EventGroupItem
VAR
	name : T_MAXSTRING;
	firstEventHandlerItem : I_EventHandlerItem;
	_next : I_EventGroupItem;
	_previous : I_EventGroupItem;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{6b4faf6d-908a-0f96-192d-76e2be6cc1f1}" />
    <Folder Name="Destructor" Id="{9bcb25f6-da21-415a-bb18-7a158bb69b9c}" />
    <Folder Name="Private" Id="{c1622086-a143-03da-206d-9fe068b400ff}" />
    <Method Name="AddHandler" Id="{997b0bc9-2d2d-03f8-228b-b62bbd3eb317}">
      <Declaration><![CDATA[METHOD PUBLIC AddHandler
VAR_INPUT
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddNewEventHandlerItem(EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNewEventHandlerItem" Id="{5362dc37-d444-0f4e-2f81-e06b34fc0e73}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC AddNewEventHandlerItem : I_EventHandlerItem
VAR_INPUT
	EventHandler : I_EventHandler;
END_VAR
VAR
	pEventHandlerItem : POINTER TO EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pEventHandlerItem := __NEW(EventHandlerItem(Handler := EventHandler));
InsertEventHandlerItem(pEventHandlerItem^);
AddNewEventHandlerItem := pEventHandlerItem^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dispose" Id="{e1f91077-1cef-0efa-3de7-cf122b8fdfa7}">
      <Declaration><![CDATA[METHOD PUBLIC Dispose
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveAllEventHandlerItems();
__Delete(this);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Emit" Id="{e60b34f8-9fa7-0f6b-2b74-93fdf67e7f67}">
      <Declaration><![CDATA[METHOD PUBLIC Emit
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem <> 0 DO
	currentEventHandlerItem.Emit(Event);
	currentEventHandlerItem := currentEventHandlerItem.Next;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="EqualTo" Id="{328d40f5-e3c2-0cda-1f3d-eed7bb83e6a8}">
      <Declaration><![CDATA[METHOD EqualTo : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EqualTo := THIS^.name = Name;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{e096376b-0675-480f-b099-1d465ba5333c}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveAllEventHandlerItems();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f87ac4b2-1713-052a-21e8-dd9974477c00}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	GroupName : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[name := GroupName;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindEventHandlerItemByHandler" Id="{5be8512f-8916-066a-0ade-3f4977175730}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindEventHandlerItemByHandler : I_EventHandlerItem
VAR_INPUT
	EventHandler : I_EventHandler;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem <> 0 DO
	
	IF currentEventHandlerItem.EqualTo(EventHandler) THEN
		FindEventHandlerItemByHandler := currentEventHandlerItem; 
		RETURN;
	END_IF
	
	currentEventHandlerItem := currentEventHandlerItem.Next;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasHandlers" Id="{e0ca0a53-c8d7-0021-1c9e-45e1453cb912}">
      <Declaration><![CDATA[PROPERTY HasHandlers : BOOL]]></Declaration>
      <Get Name="Get" Id="{bb253f2e-09a0-07b1-26ca-7d38f485fe9a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasHandlers := firstEventHandlerItem <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InsertEventHandlerItem" Id="{79d70cb5-7a1c-0779-0ab4-d1fb73717a1c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE InsertEventHandlerItem
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR
VAR
	currentEventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF firstEventHandlerItem = 0 THEN
	firstEventHandlerItem := EventHandlerItem;
	RETURN;
END_IF

currentEventHandlerItem := firstEventHandlerItem;

WHILE currentEventHandlerItem.next <> 0 DO
	currentEventHandlerItem := currentEventHandlerItem.next;
END_WHILE

currentEventHandlerItem.next := EventHandlerItem;
EventHandlerItem.previous := currentEventHandlerItem;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Next" Id="{6bd16881-506e-0380-18bb-934857c46061}">
      <Declaration><![CDATA[PROPERTY PUBLIC Next : I_EventGroupItem]]></Declaration>
      <Get Name="Get" Id="{235b1fc8-fd04-05be-2dd9-19b75bfcde09}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Next := _next;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f6e0cc02-b082-0ea7-3f8b-fa9fd5da610d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_next := Next;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Previous" Id="{05aac4f6-018a-0924-2c76-20ad77628642}">
      <Declaration><![CDATA[PROPERTY PUBLIC Previous : I_EventGroupItem]]></Declaration>
      <Get Name="Get" Id="{f35de5bb-2f2a-0177-28ee-f5f82b6c3802}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Previous := _previous;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e87f3474-fe0c-0306-15ea-e351409dc278}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_previous := Previous;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RemoveAllEventHandlerItems" Id="{22db252f-5d74-4769-8122-f4dda925b209}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveAllEventHandlerItems
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE firstEventHandlerItem <> 0 DO
	RemoveEventHandlerItem(firstEventHandlerItem);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveEventHandlerItem" Id="{f97a2596-68d2-0ec3-0c71-2d8f13ace3bb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveEventHandlerItem
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveEventHandlerItemFromCollection(EventHandlerItem);
EventHandlerItem.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveEventHandlerItemFromCollection" Id="{8e960e12-b617-0e73-0998-bc0951492a6d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveEventHandlerItemFromCollection
VAR_INPUT
	EventHandlerItem : I_EventHandlerItem;
END_VAR
VAR
	previous : I_EventHandlerItem;
	next : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF EventHandlerItem = 0 THEN
	// nothing to remove
	RETURN;
END_IF

IF EventHandlerItem = firstEventHandlerItem AND EventHandlerItem.Next = 0 THEN 
	
	// the item was the only one in the list, as such you just set the first to zero
	firstEventHandlerItem := 0; 
	
ELSIF EventHandlerItem = firstEventHandlerItem THEN 
	
	// the item was the first in the list of many, so make the next item the first and remove 
	// it's "previous" as the first in the item does not have a previous
	firstEventHandlerItem := EventHandlerItem.next; 
	firstEventHandlerItem.Previous := 0;

ELSIF EventHandlerItem.Next <> 0 THEN
	
	// the item is mid list so link it's previous and next together 
	previous := EventHandlerItem.Previous;
	next := EventHandlerItem.Next;
	
	previous.Next := next;
	next.Previous := previous;
	
ELSE 
	
	// the item is at the end so only remove itself from the previous
	previous := EventHandlerItem.Previous;
	previous.Next := 0;

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveHandler" Id="{53bbcc04-313f-0ca5-1c3a-a1d00218bc46}">
      <Declaration><![CDATA[METHOD RemoveHandler
VAR_INPUT
	EventHandler : I_EventHandler;
END_VAR
VAR
	foundHandlerItem : I_EventHandlerItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundHandlerItem := FindEventHandlerItemByHandler(EventHandler);

IF foundHandlerItem = 0 THEN
	RETURN;
END_IF

RemoveEventHandlerItem(foundHandlerItem);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>